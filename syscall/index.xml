<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syscalls on cnitlrtの博客</title>
    <link>https://cnitlrt.github.io/syscall/</link>
    <description>Recent content in Syscalls on cnitlrtの博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>cnitlrt@gmail.com (cnitlrt)</managingEditor>
    <webMaster>cnitlrt@gmail.com (cnitlrt)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://cnitlrt.github.io/syscall/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://cnitlrt.github.io/syscall/syscalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>cnitlrt@gmail.com (cnitlrt)</author>
      <guid>https://cnitlrt.github.io/syscall/syscalls/</guid>
      <description>Linux System Call Table These are the system call numbers (NR) and their corresponding symbolic names.
These vary significantly across architectures/ABIs, both in mappings and in actual name.
This is a quick reference for people debugging things (e.g. seccomp failures).
For more details on syscalls in general, see the syscall(2) man page.
[TOC]
Random Names Depending on the environment you&amp;rsquo;re in, syscall names might use slightly different naming conventions.
The kernel headers (e.</description>
    </item>
    
  </channel>
</rss>
